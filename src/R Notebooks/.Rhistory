ggplot(df, aes(x=OA_check.fact, y=trunk_lean_max_mean_sit2stand)) +
geom_boxplot(fill="gray")+
labs(x="Osteoarthritis Status", y = "Max Trunk Lean")+
theme_classic()
x <- t.test(df$trunk_lean_max_mean_sit2stand[row(df)[which(df$OA_check == 0)]], df$trunk_lean_max_mean_sit2stand[row(df)[which(df$OA_check == 1)]])
x
x$conf.int
# Mental health vs. Trunk Acceleration
plot3 <- ggscatter(df_age50plus, x = "trunk_lean_max_ang_acc_sit2stand", y = "GMH_TScore", xlab = "Max Trunk Acceleration", size = 3, font.label = c(20, "plain"),
ylab = "Mental Health",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot3 + stat_cor(method = "pearson", label.x = 250, label.y = 70)
# Age Bins
TimeAgeGroup <- tapply(df$time, df$ageBin, summary)
boxplot(TimeAgeGroup, xlab="Age Bin", ylab="Time")
# Physical health vs. Time
plot1 <- ggscatter(df, x = "right_hip_max_mean_sit2stand", y = "Age" , xlab = "Age", size = 3, font.label = c(20, "plain"),
ylab = "right_hip_max_mean_stand2sit",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot1 + stat_cor(method = "pearson", label.x = 10, label.y = 70)
# Age vs. Trunk Lean
plot2 <- ggscatter(df_age50plus, x = "trunk_lean_max_mean_sit2stand", y = "Age", xlab = "Max Trunk Lean", size = 3, font.label = c(20, "plain"),
ylab = "Age",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot2 + stat_cor(method = "pearson", label.x = 190, label.y = 90)
# Ethnicity vs. Trunk lean
TrunkLean_Eth <- tapply(df$trunk_lean_max_mean_sit2stand, df$Ethnicity, summary)
boxplot(TrunkLean_Eth, xlab="Ethnicity", ylab="Max Trunk Lean")
# Osteoarthritis Status vs. trunk angle
df$OA_check.fact <- as.factor(df$OA_check)
ggplot(df, aes(x=OA_check.fact, y=trunk_lean_max_mean_sit2stand)) +
geom_boxplot(fill="gray")+
labs(x="Osteoarthritis Status", y = "Max Trunk Lean")+
theme_classic()
x <- t.test(df$trunk_lean_max_mean_sit2stand[row(df)[which(df$OA_check == 0)]], df$trunk_lean_max_mean_sit2stand[row(df)[which(df$OA_check == 1)]])
x
x$conf.int
# Mental health vs. Trunk Acceleration
plot3 <- ggscatter(df_age50plus, x = "trunk_lean_max_ang_acc_sit2stand", y = "GMH_TScore", xlab = "Max Trunk Acceleration", size = 3, font.label = c(20, "plain"),
ylab = "Mental Health",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot3 + stat_cor(method = "pearson", label.x = 250, label.y = 70)
# Age Bins
TimeAgeGroup <- tapply(df$time, df$ageBin, summary)
boxplot(TimeAgeGroup, xlab="Age Bin", ylab="Time")
# Physical health vs. Time
plot1 <- ggscatter(df_age50minus, x = "right_hip_max_mean_sit2stand", y = "Age" , xlab = "Age", size = 3, font.label = c(20, "plain"),
ylab = "right_hip_max_mean",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot1 + stat_cor(method = "pearson", label.x = 10, label.y = 70)
# Age vs. Trunk Lean
plot2 <- ggscatter(df_age50plus, x = "trunk_lean_max_mean_sit2stand", y = "Age", xlab = "Max Trunk Lean", size = 3, font.label = c(20, "plain"),
ylab = "Age",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot2 + stat_cor(method = "pearson", label.x = 190, label.y = 90)
# Ethnicity vs. Trunk lean
TrunkLean_Eth <- tapply(df$trunk_lean_max_mean_sit2stand, df$Ethnicity, summary)
boxplot(TrunkLean_Eth, xlab="Ethnicity", ylab="Max Trunk Lean")
# Osteoarthritis Status vs. trunk angle
df$OA_check.fact <- as.factor(df$OA_check)
ggplot(df, aes(x=OA_check.fact, y=trunk_lean_max_mean_sit2stand)) +
geom_boxplot(fill="gray")+
labs(x="Osteoarthritis Status", y = "Max Trunk Lean")+
theme_classic()
x <- t.test(df$trunk_lean_max_mean_sit2stand[row(df)[which(df$OA_check == 0)]], df$trunk_lean_max_mean_sit2stand[row(df)[which(df$OA_check == 1)]])
x
x$conf.int
# Mental health vs. Trunk Acceleration
plot3 <- ggscatter(df_age50plus, x = "trunk_lean_max_ang_acc_sit2stand", y = "GMH_TScore", xlab = "Max Trunk Acceleration", size = 3, font.label = c(20, "plain"),
ylab = "Mental Health",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot3 + stat_cor(method = "pearson", label.x = 250, label.y = 70)
# Age Bins
TimeAgeGroup <- tapply(df$time, df$ageBin, summary)
boxplot(TimeAgeGroup, xlab="Age Bin", ylab="Time")
# Physical health vs. Time
plot1 <- ggscatter(df_age50plus, x = "right_hip_max_mean_sit2stand", y = "Age" , xlab = "Age", size = 3, font.label = c(20, "plain"),
ylab = "right_hip_max_mean",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot1 + stat_cor(method = "pearson", label.x = 10, label.y = 70)
# Age vs. Trunk Lean
plot2 <- ggscatter(df_age50plus, x = "trunk_lean_max_mean_sit2stand", y = "Age", xlab = "Max Trunk Lean", size = 3, font.label = c(20, "plain"),
ylab = "Age",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot2 + stat_cor(method = "pearson", label.x = 190, label.y = 90)
# Ethnicity vs. Trunk lean
TrunkLean_Eth <- tapply(df$trunk_lean_max_mean_sit2stand, df$Ethnicity, summary)
boxplot(TrunkLean_Eth, xlab="Ethnicity", ylab="Max Trunk Lean")
# Osteoarthritis Status vs. trunk angle
df$OA_check.fact <- as.factor(df$OA_check)
ggplot(df, aes(x=OA_check.fact, y=trunk_lean_max_mean_sit2stand)) +
geom_boxplot(fill="gray")+
labs(x="Osteoarthritis Status", y = "Max Trunk Lean")+
theme_classic()
x <- t.test(df$trunk_lean_max_mean_sit2stand[row(df)[which(df$OA_check == 0)]], df$trunk_lean_max_mean_sit2stand[row(df)[which(df$OA_check == 1)]])
x
x$conf.int
# Mental health vs. Trunk Acceleration
plot3 <- ggscatter(df_age50plus, x = "trunk_lean_max_ang_acc_sit2stand", y = "GMH_TScore", xlab = "Max Trunk Acceleration", size = 3, font.label = c(20, "plain"),
ylab = "Mental Health",
add = "reg.line",  # Add regressin line
add.params = list(color = "lightblue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
)
plot3 + stat_cor(method = "pearson", label.x = 250, label.y = 70)
# x is a matrix containing the data
# method : correlation method. "pearson"" or "spearman"" is supported
# removeTriangle : remove upper or lower triangle
# results :  if "html" or "latex"
# the results will be displayed in html or latex format
corstars <-function(x, method=c("pearson", "spearman"), removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
corstars(df_boruta_all)
df_boruta_all <- df[, c("numMedCond", "pelvic_avg_speed", "right_hip_min_ang_acc", "right_hip_max_mean_stand2sit", "left_hip_min_ang_vel_sit2stand", "right_ankle_max_sd_stand2sit", "left_knee_max_mean_stand2sit")]
corstars(df_boruta_all)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_all %>%
select(-all_of(columns_to_exclude))
df_boruta_all <- df[, c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin", "numMedCond", "pelvic_avg_speed", "right_hip_min_ang_acc", "right_hip_max_mean_stand2sit", "left_hip_min_ang_vel_sit2stand", "right_ankle_max_sd_stand2sit", "left_knee_max_mean_stand2sit")]
df_boruta_kin <- df[, c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin", 'left_hip_min_ang_vel_sit2stand', 'left_knee_min_ang_vel_stand2sit', 'neck_min_y_acc', 'pelvic_avg_speed', 'right_ankle_max_sd_stand2sit', 'right_hip_max_mean', 'right_hip_max_mean_stand2sit', 'right_hip_max_stand2sit', 'right_hip_min_ang_acc', 'speed', 'speed_stand2sit', 'time_diff_sit2stand', 'time_diff_stand2sit', 'time_stand2sit')]
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_all %>%
select(-all_of(columns_to_exclude))
corstars(df_boruta_all)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_all %>%
select(-all_of(columns_to_exclude))
corstars(df_boruta_all)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_all %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_kin %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_kin_50plus %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_elastic_kin_50plus %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
corstars(df[, c("time", "trunk_lean_max_mean_sit2stand", "trunk_lean_max_ang_acc_sit2stand", "Age", "Sex", "BMI", "EthBin", "GPH_TScore", "GMH_TScore", "OA_check")])
corstars(df_age50plus[, c("time", "trunk_lean_max_mean_sit2stand", "trunk_lean_max_ang_acc_sit2stand", "GPH_TScore", "GMH_TScore")])
corstars(df_clean)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_elastic_kin %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_elastic_all %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_all %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_all %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
write.csv(corstars(df_clean), "cor_boruta_all.csv", row.names = True)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_all %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
write.csv(corstars(df_clean), "cor_boruta_all.csv", row.names = T)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_all %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
write.csv(corstars(df_clean), "cor_boruta_all.csv", row.names = T)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_boruta_kin %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
write.csv(corstars(df_clean), "cor_boruta_kin.csv", row.names = T)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_elastic_all %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
write.csv(corstars(df_clean), "cor_elastic_all.csv", row.names = T)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_elastic_kin %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
write.csv(corstars(df_clean), "cor_elastic_kin.csv", row.names = T)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_csf_all %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
write.csv(corstars(df_clean), "cor_csf_all.csv", row.names = T)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_csf_kin %>%
select(-all_of(columns_to_exclude))
corstars(df_clean)
write.csv(corstars(df_clean), "cor_csf_kin.csv", row.names = T)
df_selected <- df[, c('left_knee_max_mean_stand_to_sit', 'neck_min_y_acceleration',
'average_pelvic_speed', 'trunk_lean_min_angular_acceleration',
'right_ankle_max_sd_stand_to_sit', 'pelvic_min_speed_stand_to_sit',
'right_hip_max_mean',
'left_knee_min_angular_velocity_stand_to_sit',
'concern_of_falling_1', 'time_stand_to_sit', 'meditation',
'left_hip_min_angular_velocity_sit_to_stand',
'right_ankle_max_mean_stand_to_sit', 'concern_of_falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_standard_deviation_stand_to_sit',
'right_hip_max_mean_stand_to_sit',
'right_ankle_angular_acceleration', 'pelvic_avg_y_acceleration',
'vigorous_minutes', 'right_hip_max',
'right_hip_minimum_angular_acceleration',
'number_of_medical_conditions',
'left_shank_angle_angular_acceleration', 'neck_avg_y_acceleration',
'left_hip_min_ang_velocity_sit_to_stand',
'speed_standard_deviation', 'walk_time',
'right_hip_min_angular_acceleration',
'number_of_medical_conditions_2', 'ipaq_sf_5',
'pelvic_min_speed_sit_to_stand')]
df_selected <- df[, c('left_knee_max_mean_stand_to_sit', 'neck_min_y_acceleration',
'average_pelvic_speed', 'trunk_lean_min_angular_acceleration',
'right_ankle_max_sd_stand_to_sit', 'pelvic_min_speed_stand_to_sit',
'right_hip_max_mean',
'left_knee_min_angular_velocity_stand_to_sit',
'falling_1', 'time_stand_to_sit', 'meditation',
'left_hip_min_angular_velocity_sit_to_stand',
'right_ankle_max_mean_stand_to_sit', 'falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_standard_deviation_stand_to_sit',
'right_hip_max_mean_stand_to_sit',
'right_ankle_angular_acceleration', 'pelvic_avg_y_acceleration',
'vigorous_minutes', 'right_hip_max',
'right_hip_minimum_angular_acceleration',
'number_of_medical_conditions',
'left_shank_angle_angular_acceleration', 'neck_avg_y_acceleration',
'left_hip_min_ang_velocity_sit_to_stand',
'speed_standard_deviation', 'walk_time',
'right_hip_min_angular_acceleration',
'number_of_medical_conditions_2', 'ipaq_sf_5',
'pelvic_min_speed_sit_to_stand')]
df_selected <- df[, c('left_knee_max_mean_stand_to_sit', 'neck_min_y_acceleration',
'pelvic_avg_speed', 'trunk_lean_min_angular_acceleration',
'right_ankle_max_sd_stand_to_sit', 'pelvic_min_speed_stand_to_sit',
'right_hip_max_mean',
'left_knee_min_angular_velocity_stand_to_sit',
'falling_1', 'time_stand_to_sit', 'meditation',
'left_hip_min_angular_velocity_sit_to_stand',
'right_ankle_max_mean_stand_to_sit', 'falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_standard_deviation_stand_to_sit',
'right_hip_max_mean_stand_to_sit',
'right_ankle_angular_acceleration', 'pelvic_avg_y_acceleration',
'vigorous_minutes', 'right_hip_max',
'right_hip_minimum_angular_acceleration',
'number_of_medical_conditions',
'left_shank_angle_angular_acceleration', 'neck_avg_y_acceleration',
'left_hip_min_ang_velocity_sit_to_stand',
'speed_standard_deviation', 'walk_time',
'right_hip_min_angular_acceleration',
'numMed_2', 'IPAQ_SF_5',
'pelvic_min_speed_sit_to_stand')]
df_selected <- df[, c('left_knee_max_mean_stand_to_sit', 'neck_min_y_acceleration',
'pelvic_avg_speed', 'trunk_lean_min_angular_acceleration',
'right_ankle_max_sd_stand_to_sit', 'pelvic_min_speed_stand_to_sit',
'right_hip_max_mean',
'left_knee_min_angular_velocity_stand_to_sit',
'falling_1', 'time_stand_to_sit', 'Meditation',
'left_hip_min_angular_velocity_sit_to_stand',
'right_ankle_max_mean_stand_to_sit', 'falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_standard_deviation_stand_to_sit',
'right_hip_max_mean_stand_to_sit',
'right_ankle_angular_acceleration', 'pelvic_avg_y_acceleration',
'vigorous_minutes', 'right_hip_max',
'right_hip_minimum_angular_acceleration',
'number_of_medical_conditions',
'left_shank_angle_angular_acceleration', 'neck_avg_y_acceleration',
'left_hip_min_ang_velocity_sit_to_stand',
'speed_standard_deviation', 'walk_time',
'right_hip_min_angular_acceleration',
'numMed_2', 'IPAQ_SF_5',
'pelvic_min_speed_sit_to_stand')]
df_selected <- df[, c('left_knee_max_mean_stand_to_sit', 'neck_min_y_acceleration',
'pelvic_avg_speed', 'trunk_lean_min_angular_acceleration',
'right_ankle_max_sd_stand_to_sit', 'pelvic_min_speed_stand_to_sit',
'right_hip_max_mean',
'left_knee_min_angular_velocity_stand_to_sit',
'falling_1', 'time_stand_to_sit', 'Meditation',
'left_hip_min_angular_velocity_sit_to_stand',
'right_ankle_max_mean_stand_to_sit', 'falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_standard_deviation_stand_to_sit',
'right_hip_max_mean_stand_to_sit',
'right_ankle_angular_acceleration', 'pelvic_avg_y_acceleration',
'vigMins', 'right_hip_max',
'right_hip_minimum_angular_acceleration',
'number_of_medical_conditions',
'left_shank_angle_angular_acceleration', 'neck_avg_y_acceleration',
'left_hip_min_ang_velocity_sit_to_stand',
'speed_standard_deviation', 'walk_time',
'right_hip_min_angular_acceleration',
'numMed_2', 'IPAQ_SF_5',
'pelvic_min_speed_sit_to_stand')]
df_selected <- df[, c('left_knee_max_mean_stand2sit', 'neck_min_y_acceleration',
'pelvic_avg_speed', 'trunk_lean_min_angular_acceleration',
'right_ankle_max_sd_stand2sit', 'pelvic_min_speed_stand2sit',
'right_hip_max_mean',
'left_knee_min_angular_velocity_stand2sit',
'falling_1', 'time_stand2sit', 'Meditation',
'left_hip_min_angular_velocity_sit2stand',
'right_ankle_max_mean_stand2sit', 'falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_standard_deviation_stand2sit',
'right_hip_max_mean_stand2sit',
'right_ankle_angular_acceleration', 'pelvic_avg_y_acceleration',
'vigMins', 'right_hip_max',
'right_hip_minimum_angular_acceleration',
'numMedCond',
'left_shank_angle_angular_acceleration', 'neck_avg_y_acceleration',
'left_hip_min_ang_velocity_sit2stand',
'speed_standard_deviation', 'walkTime',
'right_hip_min_angular_acceleration',
'numMed_2', 'IPAQ_SF_5',
'pelvic_min_speed_sit_to_stand')]
df_selected <- df[, c('left_knee_max_mean_stand2sit', 'neck_min_y_acc',
'pelvic_avg_speed', 'trunk_lean_min_ang_acc',
'right_ankle_max_sd_stand2sit', 'pelvic_min_speed_stand2sit',
'right_hip_max_mean',
'left_knee_min_ang_vel_stand2sit',
'falling_1', 'time_stand2sit', 'Meditation',
'left_hip_min_ang_vel_sit2stand',
'right_ankle_max_mean_stand2sit', 'falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_sd_stand2sit',
'right_hip_max_mean_stand2sit',
'right_ankle_ang_acc', 'pelvic_avg_y_acc',
'vigMins', 'right_hip_max',
'right_hip_min_ang_acc',
'numMedCond',
'left_shank_angle_ang_acc', 'neck_avg_y_acc',
'left_hip_min_ang_vel_sit2stand',
'speed_sd', 'walkTime',
'right_hip_min_ang_acc',
'numMed_2', 'IPAQ_SF_5',
'pelvic_min_speed_sit2stand')]
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_selected %>%
select(-all_of(columns_to_exclude))
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_csf_all %>%
select(-all_of(columns_to_exclude))
corstars(df_selected)
write.csv(corstars(df_clean), "cor_selected.csv", row.names = T)
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_csf_all %>%
select(-all_of(columns_to_exclude))
corstars(df_selected)
write.csv(corstars(df_selected), "cor_selected.csv", row.names = T)
df_selected <- df[, c('left_knee_max_mean_stand2sit', 'neck_min_y_acc',
'pelvic_avg_speed', 'trunk_lean_min_ang_acc',
'right_ankle_max_sd_stand2sit', 'pelvic_min_speed_stand2sit',
'right_hip_max_mean',
'left_knee_min_ang_vel_stand2sit',
'falling_1', 'time_stand2sit', 'Meditation',
'left_hip_min_ang_vel_sit2stand',
'right_ankle_max_mean_stand2sit', 'falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_sd_stand2sit',
'right_hip_max_mean_stand2sit',
'right_ankle_ang_acc', 'pelvic_avg_y_acc',
'vigMins', 'right_hip_max',
'right_hip_min_ang_acc',
'numMedCond',
'left_shank_angle_ang_acc', 'neck_avg_y_acc',
'left_hip_min_ang_vel_sit2stand',
'speed_sd', 'walkTime',
'right_hip_min_ang_acc',
'numMed_2', 'IPAQ_SF_5',
'pelvic_min_speed_sit2stand')]
df_selected_final <- df[, c('left_knee_max_mean_stand2sit', 'neck_min_y_acc',
'pelvic_avg_speed', 'trunk_lean_min_ang_acc',
'right_ankle_max_sd_stand2sit', 'left_knee_min_ang_vel_stand2sit',
'falling_1', 'time_stand2sit', 'Meditation',
'left_hip_min_ang_vel_sit2stand', 'right_ankle_max_mean_stand2sit',
'falling_2', 'pelvic_avg_y_speed',
'left_shank_angle_min_sd_stand2sit', 'right_ankle_ang_acc',
'pelvic_avg_y_acc', 'vigMins', 'right_hip_max',
'right_hip_min_ang_acc', 'numMedCond', 'left_shank_angle_ang_acc',
'neck_avg_y_acc', 'speed_sd', 'walkTime', 'IPAQ_SF_5',
'pelvic_min_speed_sit2stand')]
columns_to_exclude <- c('ageGroup', "Age", "Height", "Weight", "BMI", "Sex", "fallsBin")
df_clean <- df_csf_all %>%
select(-all_of(columns_to_exclude))
corstars(df_selected_final)
#write.csv(corstars(df_selected), "cor_selected.csv", row.names = T)
# Binary Fall status
# Selected parameters status - control for time, age, sex, BMI
columns_to_exclude <- c("ageGroup", "Height", "Sex", "Age", "BMI", "Weight")
df_clean <- df_csf_all_50plus %>%
select(-all_of(columns_to_exclude))
# Scale only continuous (numeric) variables and keep categorical variables unchanged
df_scaled <- df_selected_final %>%
mutate_if(is.numeric, scale)
mod <- glm(fallsBin ~ ., data = df_scaled)
df_selected <- df[, c('left_knee_max_mean_stand2sit', 'neck_min_y_acc',
'pelvic_avg_speed', 'trunk_lean_min_ang_acc',
'right_ankle_max_sd_stand2sit', 'pelvic_min_speed_stand2sit',
'right_hip_max_mean',
'left_knee_min_ang_vel_stand2sit',
'falling_1', 'time_stand2sit', 'Meditation',
'left_hip_min_ang_vel_sit2stand',
'right_ankle_max_mean_stand2sit', 'falling_2',
'pelvic_avg_y_speed',
'left_shank_angle_min_sd_stand2sit',
'right_hip_max_mean_stand2sit',
'right_ankle_ang_acc', 'pelvic_avg_y_acc',
'vigMins', 'right_hip_max',
'right_hip_min_ang_acc',
'numMedCond',
'left_shank_angle_ang_acc', 'neck_avg_y_acc',
'left_hip_min_ang_vel_sit2stand',
'speed_sd', 'walkTime',
'right_hip_min_ang_acc',
'numMed_2', 'IPAQ_SF_5',
'pelvic_min_speed_sit2stand')]
df_selected_final <- df[, c('fallsBin','left_knee_max_mean_stand2sit', 'neck_min_y_acc',
'pelvic_avg_speed', 'trunk_lean_min_ang_acc',
'right_ankle_max_sd_stand2sit', 'left_knee_min_ang_vel_stand2sit',
'falling_1', 'time_stand2sit', 'Meditation',
'left_hip_min_ang_vel_sit2stand', 'right_ankle_max_mean_stand2sit',
'falling_2', 'pelvic_avg_y_speed',
'left_shank_angle_min_sd_stand2sit', 'right_ankle_ang_acc',
'pelvic_avg_y_acc', 'vigMins', 'right_hip_max',
'right_hip_min_ang_acc', 'numMedCond', 'left_shank_angle_ang_acc',
'neck_avg_y_acc', 'speed_sd', 'walkTime', 'IPAQ_SF_5',
'pelvic_min_speed_sit2stand')]
# Binary Fall status
# Selected parameters status - control for time, age, sex, BMI
columns_to_exclude <- c("ageGroup", "Height", "Sex", "Age", "BMI", "Weight")
df_clean <- df_csf_all_50plus %>%
select(-all_of(columns_to_exclude))
# Scale only continuous (numeric) variables and keep categorical variables unchanged
df_scaled <- df_selected_final %>%
mutate_if(is.numeric, scale)
mod <- glm(fallsBin ~ ., data = df_scaled)
summary(mod, family = "binomial")
confint(mod)
exp(coef(mod))
